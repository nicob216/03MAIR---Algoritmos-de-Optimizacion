{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nicob216/03MAIR---Algoritmos-de-Optimizacion/blob/main/TRABAJO_PRACTICO\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hVbXYX-RfPWh"
      },
      "source": [
        "# **Algoritmos de optimización - Trabajo Práctico<br>**\n",
        "Nombre y Apellidos: Nicolas Babiy Babiy  <br>\n",
        "Url: https://github.com/nicob216/03MAIR---Algoritmos-de-Optimizacion/blob/main/Trabajo_Pr%C3%A1ctico_Algoritmos_Nicolas_Babiy_Babiy(V2).ipynb\n",
        "\n",
        "Google Colab: https://colab.research.google.com/drive/1o9X_-Mx2WAKeyMRAfGxLO4rnnMqIgFAg <br>\n",
        "Problema:\n",
        "### **1. Sesiones de doblaje** <br>\n",
        "\n",
        "Descripción del problema:\n",
        "\n",
        "Se precisa coordinar el doblaje de una película. Los actores del doblaje deben coincidir en las\n",
        "tomas en las que sus personajes aparecen juntos en las diferentes tomas. Los actores de\n",
        "doblaje cobran todos la misma cantidad por cada día que deben desplazarse hasta el estudio de\n",
        "grabación independientemente del número de tomas que se graben. No es posible grabar más\n",
        "de 6 tomas por día. El objetivo es planificar las sesiones por día de manera que el gasto por los\n",
        "servicios de los actores de doblaje sea el menor posible. Los datos son:\n",
        "\n",
        "*   Número de actores: 10\n",
        "*   Número de tomas : 30\n",
        "*   Actores/Tomas : https://bit.ly/36D8IuK\n",
        "\n",
        "   *   1 indica que el actor participa en la toma\n",
        "   *   0 en caso contrario\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "                                        "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Modelo\n",
        "- **¿Como represento el espacio de soluciones?**\n",
        "\n",
        "Una solución válida se puede representar como una lista de días donde cada día contiene una sublista con hasta 6 tomas.\n",
        "Su estructura sería:\n",
        "\n",
        "*   La solución es una lista con sublista (cada sublista es un día)\n",
        "*   Cada elemento dentro de la sublista es la toma que se asigna a dicho día con rango [0,29]\n",
        "\n",
        "\n",
        "- **¿Cual es la función objetivo?**\n",
        "\n",
        "Minimizar el coste total de las sesiones de grabación. Puesto que los actores cobran por día que tienen que asistir y no por toma:\n",
        "\n",
        "min(Coste total) = sum(número de actores distintos que participan ese día)\n",
        "\n",
        "Para ello juntaremos las tomas de cada día y revisaremos qué actores participan en al menos una de dichas tomas y los sumaremos (obtenemos así el coste por día)\n",
        "a continuación sumaremos los costes de cada día y tendremos el coste total. Puesto que todos cobran lo mismo será más sencillo\n",
        "\n",
        "- **¿Como implemento las restricciones?**\n",
        "\n",
        "Primero de todo identificamos las restricciones, en este caso tenemos dos claramente:\n",
        "\n",
        "- Se puede realizar un máximo de 6 tomas por día\n",
        "- Todas las tomas solo pueden aparecer una vez, es decir no repetir la toma en distinots dias  ni en el mismo día varias veces.\n"
      ],
      "metadata": {
        "id": "Sbo9IqQtpaHZ"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AiskKkzZfy4e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "429a67c3-0aa1-44cb-c32e-a04e21c4b4ee"
      },
      "source": [
        "'''\n",
        "¿Como represento el espacio de soluciones?\n",
        "\n",
        "'''\n",
        "print(f'Formato del espacio de soluciones:')\n",
        "formato_solucion = [\n",
        "    [0, 3, 5, 8, 12, 14],   # Día 1\n",
        "    [1, 2, 6, 9, 10, 11],   # Día 2\n",
        "    ['...'],\n",
        "    [27, 28, 29]            # Día n\n",
        "]\n",
        "print(formato_solucion)\n",
        "\n",
        "\n",
        "#Creamos la variable solución:\n",
        "solucion = []"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Formato del espacio de soluciones:\n",
            "[[0, 3, 5, 8, 12, 14], [1, 2, 6, 9, 10, 11], ['...'], [27, 28, 29]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "¿Cual es la función objetivo?\n",
        "\n",
        "'''\n",
        "#Vamos a modelar ahora la función de costes csegun lo mencionado arriba donde las entradas serán la solución y los datos que llamaré matriz de participación\n",
        "def coste_total(solucion, matriz_participacion):\n",
        "    total = 0\n",
        "    for dia in solucion: #recorre cada día (n)\n",
        "        actores_en_dia = set()\n",
        "        for toma in dia: #recorre cada toma del día (hay 30)\n",
        "            for actor in range(10): #por cada actor iteramos, hay 10 (revisar si cambiar a var sacada de datos)\n",
        "                if matriz_participacion[toma][actor] == 1:\n",
        "                    actores_en_dia.add(actor)\n",
        "        total += len(actores_en_dia)\n",
        "    return total\n"
      ],
      "metadata": {
        "id": "NAAiwmZz-_7z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "restricciones\n",
        "\n",
        "'''\n",
        "#fucnio para que no haya mas de 6 tomas por día en la solucion\n",
        "def max_tomas_por_dia(solucion): #len(dia) complejidad constante\n",
        "  return all(len(dia) <= 6 for dia in solucion) #bucle for complejidad recorre 30 días complejidad O(n)\n",
        "\n",
        "def tomas_sin_repetir(solucion):\n",
        "    todas = [toma for dia in solucion for toma in dia] #complejidad O(n^2)\n",
        "    return len(todas) == 30 and len(set(todas)) == 30 and all(0 <= t < 30 for t in todas) #hay 30 tomas ni mas ni menos, no son repetidas, y están en el rango 0-29\n",
        "def comprobar_restricciones(solucion):\n",
        "  return max_tomas_por_dia(solucion) and tomas_sin_repetir(solucion) #O(n) + O(n^2) es aprox O(n^2)\n"
      ],
      "metadata": {
        "id": "1-hhelQyAtn3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Análisis\n",
        "- ¿Que complejidad tiene el problema?. Orden de complejidad y Contabilizar el espacio de soluciones\n",
        "\n",
        "Para la complejidad, analizando la función de coste total para cada posible solución es O(n^3) porque hay tres bucles aunque en realidad estos bucles están acotdos por diferentes tamaños luego la complejidad real de la función de coste sería O(D · K · A), donde:\n",
        "\n",
        "*   D es el número de días.\n",
        "*   K el número de tomas por día (máximo 6).\n",
        "*   A el número de actores (10).\n",
        "\n",
        "En el peor caso, donde el algoritmo ers nefasto y asigna para cada toma un día tendríamos D = 30, por lo que la complejidad sería O(1800)\n",
        "\n",
        "En cuanto al espacio de soluciones, el problema consiste en asignar 30 tomas a días de grabación, agrupándolas en conjuntos de máximo 6 tomas por día y sin repetir ninguna.\n",
        "\n",
        "Esto equivale a particionar un conjunto de 30 elementos en subconjuntos de tamaño ≤ 6, lo que da lugar a un espacio de soluciones combinatoriamente enorme."
      ],
      "metadata": {
        "id": "HZz52wOppp-U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from math import comb\n",
        "\n",
        "def contar_soluciones(tomas, max_tomas_dia):\n",
        "    memo = {}\n",
        "\n",
        "    def particiones(restantes):\n",
        "        if restantes == 0:\n",
        "            return 1\n",
        "        if restantes < 0:\n",
        "            return 0\n",
        "        if restantes in memo:\n",
        "            return memo[restantes]\n",
        "\n",
        "        total = 0\n",
        "        for grupo in range(1, min(restantes, max_tomas_dia) + 1):\n",
        "            total += comb(restantes - 1, grupo - 1) * particiones(restantes - grupo)\n",
        "\n",
        "        memo[restantes] = total\n",
        "        return total\n",
        "\n",
        "    return particiones(tomas)\n",
        "\n",
        "# Aplicación práctica\n",
        "tomas = 30\n",
        "k = 6\n",
        "soluciones = contar_soluciones(tomas, k)\n",
        "print(f\"Espacio total de soluciones: {soluciones:.3e} Totalmente inviable hacer esto a mano\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "CZ-5BmpspttV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d6b54f80-86e1-47b0-a03e-20bcd42794e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Espacio total de soluciones: 7.264e+23 Totalmente inviable hacer esto a mano\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Diseño\n",
        "- **¿Que técnica utilizo? ¿Por qué?**\n",
        "\n",
        "Después de revisar las opciones vistas en clase, me decidí por el recocido simulado porque me pareció el más equilibrado entre simplicidad y eficacia. Además, fue uno de los métodos que más me llamó la atención cuando estudiaba, junto con el de colonia de hormigas. Finalmente me decidí por el primero.\n",
        "\n",
        "El motivo que me fuerza a utilizar una heurística,(en este caso la metaheurística de recocido simulado) es que el problema presenta un espacio de soluciones combinatoriamente inmenso, con restricciones que hacen inviable la búsqueda exhaustiva. Además, como la función de coste es sencilla de calcular pero no se puede derivar ni optimizar de forma exacta, el recocido simulado ofrece una forma eficiente de aproximarse a soluciones de buena calidad en un tiempo razonable.\n",
        "\n",
        "Esta técnica es especialmente útil porque:\n",
        "\n",
        "- Permite aceptar soluciones peores temporalmente para escapar de óptimos locales.\n",
        "\n",
        "- Se adapta bien a problemas con restricciones discretas, como este.\n",
        "\n",
        "- Parece relativamente fácil de aplicar y ajustar."
      ],
      "metadata": {
        "id": "ixEJUwH_pv7M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "import requests\n",
        "\n",
        "url = 'https://docs.google.com/spreadsheets/d/1Ipn6IrbQP4ax8zOnivdBIw2lN0JISkJG4fXndYd27U0/export?format=csv'\n",
        "response = requests.get(url)\n",
        "lines = response.text.splitlines()\n",
        "\n",
        "matriz_participacion = []\n",
        "for i, row in enumerate(csv.reader(lines)):\n",
        "    if i < 2:\n",
        "        continue  # saltamos cabeceras\n",
        "    if i >= 32:  # SOLO tomas 1 a 30 (fila 2 a 31 inclusive)\n",
        "        break\n",
        "    fila = [int(celda.strip()) if celda.strip().isdigit() else 0 for celda in row[1:11]]\n",
        "    matriz_participacion.append(fila)\n",
        "\n",
        "print(\"Matriz cargada con\", len(matriz_participacion), \"tomas.\")\n",
        "#print(matriz_participacion)\n",
        "verify = []\n",
        "for dia in matriz_participacion:\n",
        "  if len(dia) == 10:\n",
        "    verify.append(1)\n",
        "print(f'¿Es verdad que cada sub-vector tiene 10 instancias o actores por toma? \\n Respuesta: {len(verify)==30}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E44VuMrtBMOR",
        "outputId": "eee95c36-7032-4ded-abd2-fc07545ffd5a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matriz cargada con 30 tomas.\n",
            "¿Es verdad que cada sub-vector tiene 10 instancias o actores por toma? \n",
            " Respuesta: True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Para su implementación deberemos profundizar un poco más en el algoritmo, vamos con sus **fundamento**s:\n",
        "\n",
        "1.  **Estado del sistema:** Un estado del sistema se representa como una solución posible ***X*** en el espacio de soluciones.\n",
        "2.  **Función objetivo:** La calidad de cada solución se evalúa mediante una función objetivo ***f(x)***, que se desea minimizar.\n",
        "3.  **Temperatura:** El algoritmo utiliza el parámetro llamado temperatura ***T***, que se reduce a lo largo del tiempo. La temperatura controla la probabilidad de aceptar soluciones peores y se actualiza según un esquema de enfriamiento.\n",
        "\n",
        "### Pasos de **desarrollo**:\n",
        "1.  Inicialización: Se elige una solución inicial, se calcula ese costo, y establecemos el rango de temperaturas inicial/final.\n",
        "2.  Generación de soluciones vecinas: En cada iteración, se genera una solución vecina utilizando una perturbación aleatoria.\n",
        "3.  Evaluación de soluciones: Se calcula el nuevo costo y seguidamente la diferencia con el anterior.\n",
        "4.  Decisión de aceptación: si la nueva solución es mejor, se acepta sin condiciones, sin embargo, si es peor se acepta con una probabilidad que depende de la temperatura.\n",
        "5. Enfriamiento: Se va reduciendo la temperatura mediante un esquema de enfriamiento con un factor de enfriamineto alpha.\n",
        "6. Criterio de parada: El algoritmo se repite hasta que la temperatura sea menor que la temperatura final o algcance un número máximo de iteraciones."
      ],
      "metadata": {
        "id": "BRnVPNBAwxy1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "import random\n",
        "\n",
        "# Genera una solución inicial aleatoria válida\n",
        "def generar_solucion_inicial():\n",
        "    tomas = list(range(30))\n",
        "    random.shuffle(tomas)\n",
        "    return [tomas[i:i+6] for i in range(0, 30, 6)]\n",
        "\n",
        "# Genera una solución vecina intercambiando una toma entre 2 días\n",
        "def generar_vecina(solucion):\n",
        "    nueva = [dia[:] for dia in solucion] #copia profunda\n",
        "    #aleatorización doble:\n",
        "    d1, d2 = random.sample(range(len(nueva)), 2) #elijo dos días al azar\n",
        "\n",
        "    i = random.randint(0, len(nueva[d1]) - 1) #elijo una toma al azar del primer día\n",
        "    j = random.randint(0, len(nueva[d2]) - 1) #elijo otra toma al azar del seg día\n",
        "\n",
        "    nueva[d1][i], nueva[d2][j] = nueva[d2][j], nueva[d1][i] #intercambio\n",
        "    return nueva\n",
        "\n",
        "# Implementación completa de recocido simulado\n",
        "def recocido_simulado(matriz, temp_inicial=350, temp_final=0.001, alfa=0.95, iter_por_temp=250):   #temp final empieza a funcionar bien en 0.1 (oscila entre 27 y 28 puntualmente arroja 29)\n",
        "    actual = generar_solucion_inicial()                                                              #(0.15 oscila entre 28 y 29 el coste) (0.01 arroja casi siempre 27 y a veces 28) (0.001 ya no mejora la situación)\n",
        "    while not comprobar_restricciones(actual):                                                       # al principio la temperatura incial la he variado de 100 a 20 y no me causaba cambio pero ahora ampliándola con una\n",
        "        actual = generar_solucion_inicial()                                                          #temperatura final baja, me arroja de forma más consistente 27 siempre. pruebas (1000 - 500 -300 -350)\n",
        "                                                                                                     #si subimos las iteraciones por tiempo nos arroja 27 de forma más constante aún. pruebas (100 - 1000 - 250)\n",
        "    coste_actual = coste_total(actual, matriz)                                                      #alpha se comporta bien en 0.95\n",
        "    mejor = [dia[:] for dia in actual] #gen variable para la mejor sol almacenarla temp (deep copy)\n",
        "    mejor_coste = coste_actual #y su coste\n",
        "    temp = temp_inicial\n",
        "\n",
        "    while temp > temp_final:\n",
        "        for _ in range(iter_por_temp):\n",
        "            vecina = generar_vecina(actual)\n",
        "            if not comprobar_restricciones(vecina): #hasta que no cumpla las restricciones no válida\n",
        "                continue\n",
        "            coste_vecina = coste_total(vecina, matriz)\n",
        "            delta = coste_vecina - coste_actual\n",
        "\n",
        "            if delta < 0 or random.random() < math.exp(-delta / temp): #si es mejor se acepota si es peor  random.random() me da valor entre 0 y 1 y y la depend de tempo es math.exp(-delta / temp) exp se usaen recocido simul\n",
        "                actual = vecina\n",
        "                coste_actual = coste_vecina\n",
        "                if coste_actual < mejor_coste:\n",
        "                    mejor = [dia[:] for dia in actual]\n",
        "                    mejor_coste = coste_actual\n",
        "        temp *= alfa\n",
        "\n",
        "    return mejor, mejor_coste\n",
        "\n"
      ],
      "metadata": {
        "id": "I68Rp-iEGlX-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Ejecutar recocido simulado (entre 6 y 10 segs aprox de ejecución es algo razonable)\n",
        "mejor_sol, mejor_coste = recocido_simulado(matriz_participacion)\n",
        "print(\"Coste mínimo encontrado:\", mejor_coste)\n",
        "for i, dia in enumerate(mejor_sol):\n",
        "    print(f\"Día {i+1}: {dia}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4pR5mVeg4ke9",
        "outputId": "e38e641a-aa30-4496-9388-199ee4f58b9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coste mínimo encontrado: 27\n",
            "Día 1: [5, 0, 1, 19, 8, 6]\n",
            "Día 2: [20, 7, 28, 10, 9, 25]\n",
            "Día 3: [29, 24, 21, 11, 15, 27]\n",
            "Día 4: [23, 22, 16, 13, 18, 17]\n",
            "Día 5: [12, 2, 26, 4, 3, 14]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Por último quiero aclarar un concepto que a mi mismo me condujo a dudas, parece\n",
        "que he restringido a 5 días en:\n",
        "\n",
        " return [tomas[i:i+6] for i in range(0, 30, 6)]\n",
        "\n",
        " Que me está restringiendo si o sí a que son 5 días pero realmente es la mejor opción la que buscamos que es el menor número de días y en caso de que no exista, no cumpliría las restricciones y debería verme forzado a añadir algún día y que aparezca un dia con menos tomas y más coste pero como ha surgido una solución que cumple las restricciones aseguramos que es una buena ejecución."
      ],
      "metadata": {
        "id": "eSqH3TcGPVnP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Por último, pero no menos importante, cabe destacar que la solución obtenida tiene un coste mínimo de 27 unidades de asistencia distribuidas en solo 5 días de grabación.\n",
        "\n",
        "Suponiendo que cada actor cobra en España aproximadamente 942,62 € por sesión, el coste total en actores sería de 27 x 942,62 = 25.450,74 €.\n",
        "\n",
        "En un escenario con mala organización, el coste podría aumentar al menos un 50%, alcanzando los 38.176,11 € únicamente en costes de actores.\n",
        "\n",
        "Además, al implicar más días de rodaje, este tipo de organización supondría también un incremento en costes de plató, técnicos y logística, por lo que el ahorro global podría ser, como mínimo, del mismo orden.\n",
        "\n",
        "En conclusión, el método aplicado ha demostrado ser muy eficaz para reducir costes en este caso. Sin ayuda de este tipo de heurísticas, habría sido difícil encontrar una solución cercana a la óptima mediante razonamiento manual.\n",
        "\n",
        "Aun así, es importante tener en cuenta que estamos utilizando una metaheurística, y por tanto no garantiza la solución óptima exacta, aunque sí nos acerca de forma eficiente a soluciones de alta calidad en tiempo razonable."
      ],
      "metadata": {
        "id": "MHD96vGVhed4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "25450.74*1.5"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ens-QyoXiErz",
        "outputId": "8f9e9bcf-ed45-456f-a2b2-edf62b479f0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "38176.11"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "uMG1hsBNikJv"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}